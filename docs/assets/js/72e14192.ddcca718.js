"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[239],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(t),m=r,g=u["".concat(s,".").concat(m)]||u[m]||d[m]||l;return t?a.createElement(g,o(o({ref:n},p),{},{components:t})):a.createElement(g,o({ref:n},p))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,o=new Array(l);o[0]=u;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var c=2;c<l;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},4181:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>i,toc:()=>c});var a=t(7462),r=(t(7294),t(3905));const l={title:"Quick Start"},o=void 0,i={unversionedId:"quick-start",id:"quick-start",title:"Quick Start",description:"This tutorial demonstrates the functionality of Eraser and validates that non-running images are removed succesfully.",source:"@site/docs/quick-start.md",sourceDirName:".",slug:"/quick-start",permalink:"/eraser/docs/quick-start",draft:!1,tags:[],version:"current",frontMatter:{title:"Quick Start"},sidebar:"sidebar",previous:{title:"Installation",permalink:"/eraser/docs/installation"},next:{title:"Manual Removal",permalink:"/eraser/docs/manual-removal"}},s={},c=[{value:"Deploy a DaemonSet",id:"deploy-a-daemonset",level:2},{value:"Automatically Cleaning Images",id:"automatically-cleaning-images",level:2}],p={toc:c};function d(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This tutorial demonstrates the functionality of Eraser and validates that non-running images are removed succesfully."),(0,r.kt)("h2",{id:"deploy-a-daemonset"},"Deploy a DaemonSet"),(0,r.kt)("p",null,"After following the ",(0,r.kt)("a",{parentName:"p",href:"/eraser/docs/installation"},"install instructions"),", we'll apply a demo ",(0,r.kt)("inlineCode",{parentName:"p"},"DaemonSet"),". For illustrative purposes, a DaemonSet is applied and deleted so the non-running images remain on all nodes. The alpine image with the ",(0,r.kt)("inlineCode",{parentName:"p"},"3.7.3")," tag will be used in this example. This is an image with a known critical vulnerability."),(0,r.kt)("p",null,"First, apply the ",(0,r.kt)("inlineCode",{parentName:"p"},"DaemonSet"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"cat <<EOF | kubectl apply -f -\napiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  name: alpine\nspec:\n  selector:\n    matchLabels:\n      app: alpine\n  template:\n    metadata:\n      labels:\n        app: alpine\n    spec:\n      containers:\n      - name: alpine\n        image:docker.io/library/alpine:3.7.3\nEOF\n")),(0,r.kt)("p",null,"Next, verify that the Pods are running or completed. After the ",(0,r.kt)("inlineCode",{parentName:"p"},"alpine")," Pods complete, you may see a ",(0,r.kt)("inlineCode",{parentName:"p"},"CrashLoopBackoff")," status. This is expected behavior from the ",(0,r.kt)("inlineCode",{parentName:"p"},"alpine")," image and can be ignored for the tutorial."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ kubectl get pods\nNAME          READY   STATUS      RESTARTS     AGE\nalpine-2gh9c   1/1     Running     1 (3s ago)   6s\nalpine-hljp9   0/1     Completed   1 (3s ago)   6s\n")),(0,r.kt)("p",null,"Delete the DaemonSet:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ kubectl delete daemonset alpine\n")),(0,r.kt)("p",null,"Verify that the Pods have been deleted:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ kubectl get pods\nNo resources found in default namespace.\n")),(0,r.kt)("p",null,"To verify that the ",(0,r.kt)("inlineCode",{parentName:"p"},"alpine")," images are still on the nodes, exec into one of the worker nodes and list the images. If you are not using a kind cluster or Docker for your container nodes, you will need to adjust the exec command accordingly."),(0,r.kt)("p",null,"List the nodes:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ kubectl get nodes\nNAME                 STATUS   ROLES           AGE   VERSION\nkind-control-plane   Ready    control-plane   45m   v1.24.0\nkind-worker          Ready    <none>          45m   v1.24.0\nkind-worker2         Ready    <none>          44m   v1.24.0\n")),(0,r.kt)("p",null,"List the images then filter for ",(0,r.kt)("inlineCode",{parentName:"p"},"alpine"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ docker exec kind-worker ctr -n k8s.io images list | grep alpine\ndocker.io/library/alpine:3.7.3                                                                             application/vnd.docker.distribution.manifest.list.v2+json sha256:8421d9a84432575381bfabd248f1eb56f3aa21d9d7cd2511583c68c9b7511d10 2.0 MiB   linux/386,linux/amd64,linux/arm/v6,linux/arm64/v8,linux/ppc64le,linux/s390x  io.cri-containerd.image=managed\ndocker.io/library/alpine@sha256:8421d9a84432575381bfabd248f1eb56f3aa21d9d7cd2511583c68c9b7511d10           application/vnd.docker.distribution.manifest.list.v2+json sha256:8421d9a84432575381bfabd248f1eb56f3aa21d9d7cd2511583c68c9b7511d10 2.0 MiB   linux/386,linux/amd64,linux/arm/v6,linux/arm64/v8,linux/ppc64le,linux/s390x  io.cri-containerd.image=managed\n\n")),(0,r.kt)("h2",{id:"automatically-cleaning-images"},"Automatically Cleaning Images"),(0,r.kt)("p",null,"After deploying Eraser, it will automatically clean images in a regular interval. This interval can be set by ",(0,r.kt)("inlineCode",{parentName:"p"},"--repeat-period")," argument to ",(0,r.kt)("inlineCode",{parentName:"p"},"eraser-controller-manager"),". The default interval is 24 hours (",(0,r.kt)("inlineCode",{parentName:"p"},"24h"),'). Valid time units are "ns", "us" (or "\xb5s"), "ms", "s", "m", "h".'),(0,r.kt)("p",null,"Eraser will schedule collector pods to each node in the cluster, and the pods will collect non-running images on those nodes. Once the collectors are done, results are de-duplicated and stored in the ",(0,r.kt)("inlineCode",{parentName:"p"},"imagecollector-shared")," object in ",(0,r.kt)("inlineCode",{parentName:"p"},"ImageCollector")," CRD."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ kubectl get pods -n eraser-system\nNAME                                         READY   STATUS    RESTARTS   AGE\ncollector-kind-control-plane-lv982           1/1     Running   0          14s\ncollector-kind-control-plane-ab840           1/1     Running   0          14s\ncollector-kind-control-plane-sg352           1/1     Running   0          14s\neraser-controller-manager-649c756544-bgfds   1/1     Running   0          26s\n")),(0,r.kt)("p",null,"After collector pods are finished, scanner pod will be scheduled to each node in the cluster."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"If you want to remove all the images periodically, you can skip this step by removing the ",(0,r.kt)("inlineCode",{parentName:"p"},"--scanner-image")," argument. If you are deploying with Helm, use ",(0,r.kt)("inlineCode",{parentName:"p"},'--set scanner.image.repository=""')," to remove the scanner image.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ kubectl get pods -n eraser-system\nNAME                                         READY   STATUS    RESTARTS   AGE\neraser-controller-manager-649c756544-bgfds   1/1     Running   0          36s\neraser-scanner-78p49-vxb4j                   1/1     Running   0          5s\n")),(0,r.kt)("p",null,"After scanner pods are finished, Eraser will remove the non-running images from the cluster."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ kubectl get pods -n eraser-system\nNAME                                         READY   STATUS      RESTARTS   AGE\neraser-controller-manager-649c756544-bgfds   1/1     Running     0          56s\neraser-kind-control-plane-lswqn              1/1     Running     0          12s\neraser-kind-worker-wfqc                      0/1     Running     0          12s\neraser-kind-worker2-gwbit                    0/1     Running     0          12s\neraser-scanner-78p49-vxb4j                   0/1     Completed   0          25s\n")),(0,r.kt)("p",null,"Eraser pods will run to completion and the non-running images will be removed."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ kubectl get pods -n eraser-system\nNAME                                         READY   STATUS      RESTARTS   AGE\neraser-controller-manager-649c756544-bgfds   1/1     Running     0          61s\neraser-kind-control-plane-lswqn              0/1     Completed   0          17s\neraser-kind-worker-wfqc                      0/1     Completed   0          17s\neraser-kind-worker2-gwbit                    0/1     Completed   0          17s\neraser-scanner-78p49-vxb4j                   0/1     Completed   0          30s\n")))}d.isMDXComponent=!0}}]);