"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6252],{3905:(e,r,t)=>{t.d(r,{Zo:()=>p,kt:()=>m});var n=t(7294);function i(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function a(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){i(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,n,i=function(e,r){if(null==e)return{};var t,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(i[t]=e[t]);return i}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=n.createContext({}),c=function(e){var r=n.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):a(a({},r),e)),t},p=function(e){var r=c(e.components);return n.createElement(l.Provider,{value:r},e.children)},u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},d=n.forwardRef((function(e,r){var t=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(t),m=i,f=d["".concat(l,".").concat(m)]||d[m]||u[m]||o;return t?n.createElement(f,a(a({ref:r},p),{},{components:t})):n.createElement(f,a({ref:r},p))}));function m(e,r){var t=arguments,i=r&&r.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=d;var s={};for(var l in r)hasOwnProperty.call(r,l)&&(s[l]=r[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var c=2;c<o;c++)a[c]=t[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},6634:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var n=t(7462),i=(t(7294),t(3905));const o={title:"Exclusion"},a=void 0,s={unversionedId:"exclusion",id:"version-v1.0.x/exclusion",title:"Exclusion",description:"Excluding registries, repositories, and images",source:"@site/versioned_docs/version-v1.0.x/exclusion.md",sourceDirName:".",slug:"/exclusion",permalink:"/eraser/docs/v1.0.x/exclusion",draft:!1,tags:[],version:"v1.0.x",frontMatter:{title:"Exclusion"},sidebar:"sidebar",previous:{title:"Manual Removal",permalink:"/eraser/docs/v1.0.x/manual-removal"},next:{title:"Customization",permalink:"/eraser/docs/v1.0.x/customization"}},l={},c=[{value:"Excluding registries, repositories, and images",id:"excluding-registries-repositories-and-images",level:2},{value:"Exempting Nodes from the Eraser Pipeline",id:"exempting-nodes-from-the-eraser-pipeline",level:2}],p={toc:c};function u(e){let{components:r,...t}=e;return(0,i.kt)("wrapper",(0,n.Z)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"excluding-registries-repositories-and-images"},"Excluding registries, repositories, and images"),(0,i.kt)("p",null,"Eraser can exclude registries (example, ",(0,i.kt)("inlineCode",{parentName:"p"},"docker.io/library/*"),") and also specific images with a tag (example, ",(0,i.kt)("inlineCode",{parentName:"p"},"docker.io/library/ubuntu:18.04"),") or digest (example, ",(0,i.kt)("inlineCode",{parentName:"p"},"sha256:80f31da1ac7b312ba29d65080fd..."),") from its removal process."),(0,i.kt)("p",null,"To exclude any images or registries from the removal, create configmap(s) with the label ",(0,i.kt)("inlineCode",{parentName:"p"},"eraser.sh/exclude.list=true")," in the eraser-system namespace with a JSON file holding the excluded images."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'$ cat > sample.json <<"EOF"\n{\n  "excluded": [\n    "docker.io/library/*",\n    "ghcr.io/eraser-dev/test:latest"\n  ]\n}\nEOF\n\n$ kubectl create configmap excluded --from-file=sample.json --namespace=eraser-system\n$ kubectl label configmap excluded eraser.sh/exclude.list=true -n eraser-system\n')),(0,i.kt)("h2",{id:"exempting-nodes-from-the-eraser-pipeline"},"Exempting Nodes from the Eraser Pipeline"),(0,i.kt)("p",null,"Exempting nodes from cleanup was added in v1.0.0. When deploying Eraser, you can specify whether there is a list of nodes you would like to ",(0,i.kt)("inlineCode",{parentName:"p"},"include")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"exclude")," from the cleanup process using the configmap. For more information, see the section on ",(0,i.kt)("a",{parentName:"p",href:"https://eraser-dev.github.io/eraser/docs/customization"},"customization"),"."))}u.isMDXComponent=!0}}]);